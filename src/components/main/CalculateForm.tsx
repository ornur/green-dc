"use client";
import Form from "next/form";
import { Input } from "../ui/input";
import { Button } from "../ui/button";
import { calculate } from "@/actions/calculate";
import { toast } from "sonner";
import { useState } from "react";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "../ui/tooltip";

export default function CalculateForm() {
  const [annualEnergyOffset, setAnnualEnergyOffset] = useState<number | null>(null);
  const [annualCostSavings, setAnnualCostSavings] = useState<number | null>(null);
  const [co2Reduction, setCo2Reduction] = useState<number | null>(null);
  const [roi, setRoi] = useState<number | null>(null);
  const [paybackPeriod, setPaybackPeriod] = useState<number | null>(null);
  const dataForResults = [
    {
      label: "Total Annual Energy Offset by Wind Power (kWh)",
      description:
        "Displays the total amount of energy generated by wind power annually, which offsets the data center's energy needs.",
      value: `${annualEnergyOffset ?? 0} kWh`,
    },
    {
      label: "Annual Cost Savings from Wind Power ($)",
      description:
        "Shows the annual savings achieved by replacing grid electricity with wind energy.",
      value: `$${annualCostSavings ?? 0}`,
    },
    {
      label: "Annual Carbon Emission Reduction (tons CO₂)",
      description:
        "Indicates the reduction in CO₂ emissions due to using wind power instead of conventional energy.",
      value: `${co2Reduction?.toFixed(2) ?? 0} tons of CO₂`,
    },
    {
      label: "Return on Investment (ROI) (%)",
      description:
        "Displays the annual percentage return on the wind power investment, indicating financial viability.",
      value: `${roi?.toFixed(2) ?? 0}%`,
    },
    {
      label: "Payback Period for Wind Investment (years)",
      description:
        "Shows the number of years it will take to recover the initial investment in wind power.",
      value: `${paybackPeriod?.toFixed(2) ?? 0} years`,
    },
  ];
  const dataForInputs = [
    {
      label: "Data Center Annual Energy Consumption (kWh)",
      name: "aec",
      placeholder: "e.g., 1000000",
    },
    {
      label: "Wind Power Capacity (kW)",
      name: "wpc",
      placeholder: "e.g., 500",
    },
    {
      label: "Operational Efficiency (%)",
      name: "op",
      placeholder: "e.g., 30",
    },
    {
      label: "Initial Investment Cost ($)",
      name: "iic",
      placeholder: "e.g., 500000",
    },
    {
      label: "Annual Maintenance Cost ($)",
      name: "amc",
      placeholder: "e.g., 10000",
    },
    {
      label: "Electricity Cost per kWh ($)",
      name: "ec",
      placeholder: "e.g., 0.10",
    },
    {
      label: "Carbon Emission Factor (tons CO₂ per kWh)",
      name: "cef",
      placeholder: "e.g., 0.00045",
    },
  ];
  const onSubmitHanlder = async (formData: FormData) => {
    try {
      const result = await calculate(formData);
      toast.success("Calculation successful.");
      setAnnualEnergyOffset(result.annualEnergyOffset);
      setAnnualCostSavings(result.annualCostSavings);
      setCo2Reduction(result.co2Reduction);
      setRoi(result.roi);
      setPaybackPeriod(result.paybackPeriod);
    } catch (error) {
      const errorMessage = error instanceof Error && error.message ? error.message : "An error occurred. Please try again.";
      toast.error(errorMessage);
    }
  };
  return (
    <div id="calculate" className="container mx-auto">
      <h1 className="mb-12 w-full text-center text-lg font-bold md:text-4xl">
        Calculate the implementation of green technologies in your data centers.
      </h1>
      <div className="container mb-24 flex flex-col gap-5 px-20 md:flex-row">
        <Form
          action="/"
          className="flex flex-col rounded-lg px-5 py-5 shadow-xl md:w-2/3"
        >
          <h3 className="text-xl font-bold">Green Data Center Wind Integration Calculator</h3>
          <div className="grid grid-cols-1 gap-5 py-5 lg:grid-cols-2">
            {dataForInputs.map((input, index) => (
              <div key={index}>
                <label className="line-clamp-1 text-ellipsis text-sm">
                  {input.label}
                </label>
                <Input
                  name={input.name}
                  inputMode="numeric"
                  placeholder={input.placeholder}
                  onKeyDown={(event) => {
                    if (
                      !/[0-9]/.test(event.key) && // Allow digits
                      event.key !== "Backspace" && // Allow backspace
                      event.key !== "Delete" && // Allow delete
                      event.key !== "ArrowLeft" && // Allow left arrow
                      event.key !== "ArrowRight" && // Allow right arrow
                      event.key !== "Tab" &&// Allow tab
                      event.key !== "." // Allow decimal point
                    ) {
                      event.preventDefault();
                    }
                  }}
                />
              </div>
            ))}
          </div>

          <Button
            type="button"
            className="bg-green-500 hover:bg-green-700"
            onClick={() => {
              const formData = new FormData(
                document.querySelector("form") as HTMLFormElement,
              );
              onSubmitHanlder(formData);
            }}
          >
            Calculate
          </Button>
        </Form>
        <div className="flex flex-col justify-center rounded-lg p-5 shadow-xl md:w-1/3">
          <h3 className="text-xl font-bold">The cost of green IT technologies</h3>
          {dataForResults.map((result, index) => (
            <div key={index} className="py-2">
              <div className="flex items-end gap-1">
                <label className="line-clamp-1 text-ellipsis text-sm">
                  {result.label}
                </label>
                <TooltipProvider skipDelayDuration={0} delayDuration={0}>
                  <Tooltip>
                    <TooltipTrigger asChild className="hidden md:block">
                      <Button variant="outline" className="p-0 m-0 border-0 text-[10px] text-blue-500 hover:bg-transparent">{"(?)"}</Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>{result.description}</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
              <p className="text-lg font-bold">{result.value}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
